{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nf-core/tbAnalyzer: Documentation","text":"<p>The nf-core/tbAnalyzer documentation is split into the following pages:</p> <ul> <li>Usage</li> <li>An overview of how the pipeline works, how to run it and a description of all of the different command-line flags.</li> <li>Output</li> <li>An overview of the different results produced by the pipeline and how to interpret them.</li> </ul> <p>You can find a lot more documentation about installing, configuring and running nf-core pipelines on the website: https://nf-co.re</p>"},{"location":"user-guide/output/","title":"nf-core/tbAnalyzer: Output","text":""},{"location":"user-guide/output/#introduction","title":"Introduction","text":"<p>This document describes the output produced by the pipeline. Most of the plots are taken from the MultiQC report, which summarises results at the end of the pipeline.</p> <p>The directories listed below will be created in the results directory after the pipeline has finished. All paths are relative to the top-level results directory.</p>"},{"location":"user-guide/output/#pipeline-overview","title":"Pipeline overview","text":"<p>The pipeline is built using Nextflow and processes data using the following steps:</p> <ul> <li>FastQC - Raw read QC</li> <li>MultiQC - Aggregate report describing results and QC from the whole pipeline</li> <li>Pipeline information - Report metrics generated during the workflow execution</li> </ul>"},{"location":"user-guide/output/#fastqc","title":"FastQC","text":"Output files <ul> <li><code>fastqc/</code></li> <li><code>*_fastqc.html</code>: FastQC report containing quality metrics.</li> <li><code>*_fastqc.zip</code>: Zip archive containing the FastQC report, tab-delimited data file and plot images.</li> </ul> <p>FastQC gives general quality metrics about your sequenced reads. It provides information about the quality score distribution across your reads, per base sequence content (%A/T/G/C), adapter contamination and overrepresented sequences. For further reading and documentation see the FastQC help pages.</p> <p></p> <p></p> <p></p> <p>:::note The FastQC plots displayed in the MultiQC report shows untrimmed reads. They may contain adapter sequence and potentially regions with low quality. :::</p>"},{"location":"user-guide/output/#multiqc","title":"MultiQC","text":"Output files <ul> <li><code>multiqc/</code></li> <li><code>multiqc_report.html</code>: a standalone HTML file that can be viewed in your web browser.</li> <li><code>multiqc_data/</code>: directory containing parsed statistics from the different tools used in the pipeline.</li> <li><code>multiqc_plots/</code>: directory containing static images from the report in various formats.</li> </ul> <p>MultiQC is a visualization tool that generates a single HTML report summarising all samples in your project. Most of the pipeline QC results are visualised in the report and further statistics are available in the report data directory.</p> <p>Results generated by MultiQC collate pipeline QC from supported tools e.g. FastQC. The pipeline has special steps which also allow the software versions to be reported in the MultiQC output for future traceability. For more information about how to use MultiQC reports, see http://multiqc.info.</p>"},{"location":"user-guide/output/#pipeline-information","title":"Pipeline information","text":"Output files <ul> <li><code>pipeline_info/</code></li> <li>Reports generated by Nextflow: <code>execution_report.html</code>, <code>execution_timeline.html</code>, <code>execution_trace.txt</code> and <code>pipeline_dag.dot</code>/<code>pipeline_dag.svg</code>.</li> <li>Reports generated by the pipeline: <code>pipeline_report.html</code>, <code>pipeline_report.txt</code> and <code>software_versions.yml</code>. The <code>pipeline_report*</code> files will only be present if the <code>--email</code> / <code>--email_on_fail</code> parameter's are used when running the pipeline.</li> <li>Reformatted samplesheet files used as input to the pipeline: <code>samplesheet.valid.csv</code>.</li> <li>Parameters used by the pipeline run: <code>params.json</code>.</li> </ul> <p>Nextflow provides excellent functionality for generating various reports relevant to the running and execution of the pipeline. This will allow you to troubleshoot errors with the running of the pipeline, and also provide you with other information such as launch commands, run times and resource usage.</p>"},{"location":"user-guide/usage/","title":"nf-core/tbAnalyzer: Usage","text":""},{"location":"user-guide/usage/#please-read-this-documentation-on-the-nf-core-website-httpsnf-coretbanalyzerusage","title":"Please read this documentation on the nf-core website: https://nf-co.re/tbAnalyzer/usage","text":"<p>Documentation of pipeline parameters is generated automatically from the pipeline schema and can no longer be found in markdown files.</p>"},{"location":"user-guide/usage/#introduction","title":"Introduction","text":""},{"location":"user-guide/usage/#samplesheet-input","title":"Samplesheet input","text":"<p>You will need to create a samplesheet with information about the samples you would like to analyse before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row as shown in the examples below.</p> <pre><code>--input '[path to samplesheet file]'\n</code></pre>"},{"location":"user-guide/usage/#multiple-runs-of-the-same-sample","title":"Multiple runs of the same sample","text":"<p>The <code>sample</code> identifiers have to be the same when you have re-sequenced the same sample more than once e.g. to increase sequencing depth. The pipeline will concatenate the raw reads before performing any downstream analysis. Below is an example for the same sample sequenced across 3 lanes:</p> samplesheet.csv<pre><code>sample,fastq_1,fastq_2\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz\nCONTROL_REP1,AEG588A1_S1_L003_R1_001.fastq.gz,AEG588A1_S1_L003_R2_001.fastq.gz\nCONTROL_REP1,AEG588A1_S1_L004_R1_001.fastq.gz,AEG588A1_S1_L004_R2_001.fastq.gz\n</code></pre>"},{"location":"user-guide/usage/#full-samplesheet","title":"Full samplesheet","text":"<p>The pipeline will auto-detect whether a sample is single- or paired-end using the information provided in the samplesheet. The samplesheet can have as many columns as you desire, however, there is a strict requirement for the first 3 columns to match those defined in the table below.</p> <p>A final samplesheet file consisting of both single- and paired-end data may look something like the one below. This is for 6 samples, where <code>TREATMENT_REP3</code> has been sequenced twice.</p> samplesheet.csv<pre><code>sample,fastq_1,fastq_2\nCONTROL_REP1,AEG588A1_S1_L002_R1_001.fastq.gz,AEG588A1_S1_L002_R2_001.fastq.gz\nCONTROL_REP2,AEG588A2_S2_L002_R1_001.fastq.gz,AEG588A2_S2_L002_R2_001.fastq.gz\nCONTROL_REP3,AEG588A3_S3_L002_R1_001.fastq.gz,AEG588A3_S3_L002_R2_001.fastq.gz\nTREATMENT_REP1,AEG588A4_S4_L003_R1_001.fastq.gz,\nTREATMENT_REP2,AEG588A5_S5_L003_R1_001.fastq.gz,\nTREATMENT_REP3,AEG588A6_S6_L003_R1_001.fastq.gz,\nTREATMENT_REP3,AEG588A6_S6_L004_R1_001.fastq.gz,\n</code></pre> Column Description <code>sample</code> Custom sample name. This entry will be identical for multiple sequencing libraries/runs from the same sample. Spaces in sample names are automatically converted to underscores (<code>_</code>). <code>fastq_1</code> Full path to FastQ file for Illumina short reads 1. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <code>fastq_2</code> Full path to FastQ file for Illumina short reads 2. File has to be gzipped and have the extension \".fastq.gz\" or \".fq.gz\". <p>An example samplesheet has been provided with the pipeline.</p>"},{"location":"user-guide/usage/#running-the-pipeline","title":"Running the pipeline","text":"<p>The typical command for running the pipeline is as follows:</p> <pre><code>nextflow run nf-core/tbAnalyzer --input ./samplesheet.csv --outdir ./results --genome GRCh37 -profile docker\n</code></pre> <p>This will launch the pipeline with the <code>docker</code> configuration profile. See below for more information about profiles.</p> <p>Note that the pipeline will create the following files in your working directory:</p> <pre><code>work                # Directory containing the nextflow working files\n&lt;OUTDIR&gt;            # Finished results in specified location (defined with --outdir)\n.nextflow_log       # Log file from Nextflow\n# Other nextflow hidden files, eg. history of pipeline runs and old logs.\n</code></pre> <p>If you wish to repeatedly use the same parameters for multiple runs, rather than specifying each flag in the command, you can specify these in a params file.</p> <p>Pipeline settings can be provided in a <code>yaml</code> or <code>json</code> file via <code>-params-file &lt;file&gt;</code>.</p> <p>:::warning Do not use <code>-c &lt;file&gt;</code> to specify parameters as this will result in errors. Custom config files specified with <code>-c</code> must only be used for tuning process resource specifications, other infrastructural tweaks (such as output directories), or module arguments (args). :::</p> <p>The above pipeline run specified with a params file in yaml format:</p> <pre><code>nextflow run nf-core/tbAnalyzer -profile docker -params-file params.yaml\n</code></pre> <p>with <code>params.yaml</code> containing:</p> <pre><code>input: './samplesheet.csv'\noutdir: './results/'\ngenome: 'GRCh37'\n&lt;...&gt;\n</code></pre> <p>You can also generate such <code>YAML</code>/<code>JSON</code> files via nf-core/launch.</p>"},{"location":"user-guide/usage/#updating-the-pipeline","title":"Updating the pipeline","text":"<p>When you run the above command, Nextflow automatically pulls the pipeline code from GitHub and stores it as a cached version. When running the pipeline after this, it will always use the cached version if available - even if the pipeline has been updated since. To make sure that you're running the latest version of the pipeline, make sure that you regularly update the cached version of the pipeline:</p> <pre><code>nextflow pull nf-core/tbAnalyzer\n</code></pre>"},{"location":"user-guide/usage/#reproducibility","title":"Reproducibility","text":"<p>It is a good idea to specify a pipeline version when running the pipeline on your data. This ensures that a specific version of the pipeline code and software are used when you run your pipeline. If you keep using the same tag, you'll be running the same version of the pipeline, even if there have been changes to the code since.</p> <p>First, go to the nf-core/tbAnalyzer releases page and find the latest pipeline version - numeric only (eg. <code>1.3.1</code>). Then specify this when running the pipeline with <code>-r</code> (one hyphen) - eg. <code>-r 1.3.1</code>. Of course, you can switch to another version by changing the number after the <code>-r</code> flag.</p> <p>This version number will be logged in reports when you run the pipeline, so that you'll know what you used when you look back in the future. For example, at the bottom of the MultiQC reports.</p> <p>To further assist in reproducbility, you can use share and re-use parameter files to repeat pipeline runs with the same settings without having to write out a command with every single parameter.</p> <p>:::tip If you wish to share such profile (such as upload as supplementary material for academic publications), make sure to NOT include cluster specific paths to files, nor institutional specific profiles. :::</p>"},{"location":"user-guide/usage/#core-nextflow-arguments","title":"Core Nextflow arguments","text":"<p>:::note These options are part of Nextflow and use a single hyphen (pipeline parameters use a double-hyphen). :::</p>"},{"location":"user-guide/usage/#-profile","title":"<code>-profile</code>","text":"<p>Use this parameter to choose a configuration profile. Profiles can give configuration presets for different compute environments.</p> <p>Several generic profiles are bundled with the pipeline which instruct the pipeline to use software packaged using different methods (Docker, Singularity, Podman, Shifter, Charliecloud, Apptainer, Conda) - see below.</p> <p>:::info We highly recommend the use of Docker or Singularity containers for full pipeline reproducibility, however when this is not possible, Conda is also supported. :::</p> <p>The pipeline also dynamically loads configurations from https://github.com/nf-core/configs when it runs, making multiple config profiles for various institutional clusters available at run time. For more information and to see if your system is available in these configs please see the nf-core/configs documentation.</p> <p>Note that multiple profiles can be loaded, for example: <code>-profile test,docker</code> - the order of arguments is important! They are loaded in sequence, so later profiles can overwrite earlier profiles.</p> <p>If <code>-profile</code> is not specified, the pipeline will run locally and expect all software to be installed and available on the <code>PATH</code>. This is not recommended, since it can lead to different results on different machines dependent on the computer enviroment.</p> <ul> <li><code>test</code></li> <li>A profile with a complete configuration for automated testing</li> <li>Includes links to test data so needs no other parameters</li> <li><code>docker</code></li> <li>A generic configuration profile to be used with Docker</li> <li><code>singularity</code></li> <li>A generic configuration profile to be used with Singularity</li> <li><code>podman</code></li> <li>A generic configuration profile to be used with Podman</li> <li><code>shifter</code></li> <li>A generic configuration profile to be used with Shifter</li> <li><code>charliecloud</code></li> <li>A generic configuration profile to be used with Charliecloud</li> <li><code>apptainer</code></li> <li>A generic configuration profile to be used with Apptainer</li> <li><code>wave</code></li> <li>A generic configuration profile to enable Wave containers. Use together with one of the above (requires Nextflow <code>24.03.0-edge</code> or later).</li> <li><code>conda</code></li> <li>A generic configuration profile to be used with Conda. Please only use Conda as a last resort i.e. when it's not possible to run the pipeline with Docker, Singularity, Podman, Shifter, Charliecloud, or Apptainer.</li> </ul>"},{"location":"user-guide/usage/#-resume","title":"<code>-resume</code>","text":"<p>Specify this when restarting a pipeline. Nextflow will use cached results from any pipeline steps where the inputs are the same, continuing from where it got to previously. For input to be considered the same, not only the names must be identical but the files' contents as well. For more info about this parameter, see this blog post.</p> <p>You can also supply a run name to resume a specific run: <code>-resume [run-name]</code>. Use the <code>nextflow log</code> command to show previous run names.</p>"},{"location":"user-guide/usage/#-c","title":"<code>-c</code>","text":"<p>Specify the path to a specific config file (this is a core Nextflow command). See the nf-core website documentation for more information.</p>"},{"location":"user-guide/usage/#custom-configuration","title":"Custom configuration","text":""},{"location":"user-guide/usage/#resource-requests","title":"Resource requests","text":"<p>Whilst the default requirements set within the pipeline will hopefully work for most people and with most input data, you may find that you want to customise the compute resources that the pipeline requests. Each step in the pipeline has a default set of requirements for number of CPUs, memory and time. For most of the steps in the pipeline, if the job exits with any of the error codes specified here it will automatically be resubmitted with higher requests (2 x original, then 3 x original). If it still fails after the third attempt then the pipeline execution is stopped.</p> <p>To change the resource requests, please see the max resources and tuning workflow resources section of the nf-core website.</p>"},{"location":"user-guide/usage/#custom-containers","title":"Custom Containers","text":"<p>In some cases you may wish to change which container or conda environment a step of the pipeline uses for a particular tool. By default nf-core pipelines use containers and software from the biocontainers or bioconda projects. However in some cases the pipeline specified version maybe out of date.</p> <p>To use a different container from the default container or conda environment specified in a pipeline, please see the updating tool versions section of the nf-core website.</p>"},{"location":"user-guide/usage/#custom-tool-arguments","title":"Custom Tool Arguments","text":"<p>A pipeline might not always support every possible argument or option of a particular tool used in pipeline. Fortunately, nf-core pipelines provide some freedom to users to insert additional parameters that the pipeline does not include by default.</p> <p>To learn how to provide additional arguments to a particular tool of the pipeline, please see the customising tool arguments section of the nf-core website.</p>"},{"location":"user-guide/usage/#nf-coreconfigs","title":"nf-core/configs","text":"<p>In most cases, you will only need to create a custom config as a one-off but if you and others within your organisation are likely to be running nf-core pipelines regularly and need to use the same settings regularly it may be a good idea to request that your custom config file is uploaded to the <code>nf-core/configs</code> git repository. Before you do this please can you test that the config file works with your pipeline of choice using the <code>-c</code> parameter. You can then create a pull request to the <code>nf-core/configs</code> repository with the addition of your config file, associated documentation file (see examples in <code>nf-core/configs/docs</code>), and amending <code>nfcore_custom.config</code> to include your custom profile.</p> <p>See the main Nextflow documentation for more information about creating your own configuration files.</p> <p>If you have any questions or issues please send us a message on Slack on the <code>#configs</code> channel.</p>"},{"location":"user-guide/usage/#azure-resource-requests","title":"Azure Resource Requests","text":"<p>To be used with the <code>azurebatch</code> profile by specifying the <code>-profile azurebatch</code>. We recommend providing a compute <code>params.vm_type</code> of <code>Standard_D16_v3</code> VMs by default but these options can be changed if required.</p> <p>Note that the choice of VM size depends on your quota and the overall workload during the analysis. For a thorough list, please refer the Azure Sizes for virtual machines in Azure.</p>"},{"location":"user-guide/usage/#running-in-the-background","title":"Running in the background","text":"<p>Nextflow handles job submissions and supervises the running jobs. The Nextflow process must run until the pipeline is finished.</p> <p>The Nextflow <code>-bg</code> flag launches Nextflow in the background, detached from your terminal so that the workflow does not stop if you log out of your session. The logs are saved to a file.</p> <p>Alternatively, you can use <code>screen</code> / <code>tmux</code> or similar tool to create a detached session which you can log back into at a later time. Some HPC setups also allow you to run nextflow within a cluster job submitted your job scheduler (from where it submits more jobs).</p>"},{"location":"user-guide/usage/#nextflow-memory-requirements","title":"Nextflow memory requirements","text":"<p>In some cases, the Nextflow Java virtual machines can start to request a large amount of memory. We recommend adding the following line to your environment to limit this (typically in <code>~/.bashrc</code> or <code>~./bash_profile</code>):</p> <pre><code>NXF_OPTS='-Xms1g -Xmx4g'\n</code></pre>"}]}